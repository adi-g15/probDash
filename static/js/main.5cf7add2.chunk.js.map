{"version":3,"sources":["like.svg","components/Box/Box.js","components/App/App.js","serviceWorker.js","index.js"],"names":["module","exports","Box","props","incrementStars","event","state","starIncremented","console","log","id","content","probId","fetch","method","then","newContent","stars","setState","bgClass","className","this","style","maxWidth","title","src","like","width","float","alt","onClick","statement","React","Component","bootstrapBG","App","children","headers","res","json","data","allPS","newChildren","forEach","ps","bg","Math","floor","random","length","push","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"oGAAAA,EAAOC,QAAU,IAA0B,kC,6MCqE5BC,E,kDAhEX,WAAYC,GAAO,IAAD,8BACd,cAAMA,IAUVC,eAAiB,SAACC,GACd,GAAG,EAAKC,MAAMC,gBAAkB,OAAOC,QAAQC,IAAI,qCAEnD,IAAMC,EAAK,EAAKJ,MAAMK,QAAQC,OAC9BJ,QAAQC,IAAIC,EAAI,YAEhBG,MACI,gDAAkDH,EAClD,CACII,OAAQ,SAEdC,MAAK,WACH,IAAIC,EAAa,EAAKV,MAAMK,UAC1BK,EAAWC,MACb,EAAKC,SAAS,CACVP,QAASK,EACTT,iBAAiB,QAxBzB,EAAKD,MAAQ,CACTK,QAASR,EAAMQ,QACfQ,QAAS,QAAUhB,EAAMgB,QAAU,QAEnCZ,iBAAiB,GAPP,E,qDAgDd,OACQ,yBAAKa,UAAWC,KAAKf,MAAMa,QAASG,MAAO,CAACC,SAAU,SAClD,yBAAKH,UAAU,eAAeC,KAAKf,MAAMK,QAAQa,MAC7C,yBAAKC,IAAKC,IAAMC,MAAM,OAAOL,MAAO,CAACM,MAAO,SAAUC,IAAI,SAASC,QAAST,KAAKjB,iBAChFiB,KAAKf,MAAMK,QAAQM,OAExB,yBAAKP,GAAI,UAAYW,KAAKf,MAAMK,QAAQC,OAAQQ,UAAU,aACtD,uBAAGA,UAAU,aAAaC,KAAKf,MAAMK,QAAQoB,iB,GAzDnDC,IAAMC,WCElBC,EAAc,CAClB,wBACA,0BACA,wBACA,uBACA,wBACA,qBACA,sBAmDaC,E,kDA9Cb,aAAc,IAAD,8BACX,gBAEK7B,MAAQ,CACX8B,SAAU,IAGZvB,MAAM,gDAAiD,CACrDC,OAAQ,MACRuB,QAAS,CACP,OAAU,mBACV,eAAgB,oCAEjBtB,MAAK,SAACuB,GAAD,OAASA,EAAIC,UACpBxB,MAAK,SAAAyB,GACF,IAAIC,EAAQD,EAERE,EAAc,GAClBlC,QAAQC,IAAIgC,GACZA,EAAME,SAAQ,SAAAC,GAEZ,IAAIC,EAAKX,EAAYY,KAAKC,MAAMD,KAAKE,SAASd,EAAYe,SAC1DP,EAAYQ,KACV,kBAAC,EAAD,CAAKvC,QAASiC,EAAIzB,QAAS0B,QAI/B,EAAK3B,SAAS,CAACkB,SAAUM,OA3BlB,E,qDAiCX,OACE,yBAAKtB,UAAU,OACb,4BAAQA,UAAU,cAChB,qEAIDC,KAAKf,MAAM8B,c,GA1CFJ,IAAMC,WCHJkB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAEL,kBAAC,EAAD,MAEFC,SAASC,eAAe,SAI1BnD,QAAQC,IAAI0B,GDqHN,kBAAmByB,WACrBA,UAAUC,cAAcC,MACrB/C,MAAK,SAAAgD,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACL1D,QAAQ0D,MAAMA,EAAMC,c","file":"static/js/main.5cf7add2.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/like.871b4e9c.svg\";","import React from \"react\";\r\nimport like from '../../like.svg'\r\n\r\nclass Box extends React.Component{\r\n\r\n    constructor(props){\r\n        super(props)\r\n\r\n        this.state = {\r\n            content: props.content,\r\n            bgClass: 'card ' + props.bgClass + ' mb-3',\r\n            // contentHidden: true,\r\n            starIncremented: false\r\n        }\r\n    }\r\n\r\n    incrementStars = (event) => {   //'this' is undefined, if we declare it as normal function, either we have to use arrow functions, or 'bind' methods to 'this' in constructor\r\n        if(this.state.starIncremented)  return console.log('You have already incremented once');\r\n\r\n        const id = this.state.content.probId\r\n        console.log(id, ' clicked');\r\n\r\n        fetch(\r\n            'https://adig15.herokuapp.com/ps/sihJ20/incId/' + id,\r\n            {\r\n                method: 'POST'\r\n            }\r\n        ).then(() => {\r\n            let newContent = this.state.content\r\n            ++newContent.stars\r\n            this.setState({\r\n                content: newContent,\r\n                starIncremented: true\r\n            })\r\n        })\r\n    }\r\n\r\n    // showContent(){\r\n    //     const id = this.state.content.probId\r\n    //     const item = document.getElementById(id)\r\n    //     if(this.state.contentHidden){\r\n    //         item.className=\"card-body\"\r\n    //         this.setState({contentHidden: false})\r\n    //         console.log('Clicked -', this.state);\r\n    //     }\r\n    //     else{\r\n    //         item.className=\"\"\r\n    //         this.setState({contentHidden: true})\r\n    //         console.log('Clicked -', this.state);\r\n    //     }\r\n    // }\r\n\r\n    render(){\r\n        return (\r\n                <div className={this.state.bgClass} style={{maxWidth: '80vw'}}>\r\n                    <div className=\"card-header\">{this.state.content.title}\r\n                        <img src={like} width='24vw' style={{float: 'right'}} alt=\"Upvote\" onClick={this.incrementStars}></img>\r\n                        {this.state.content.stars}\r\n                    </div>\r\n                    <div id={'content' + this.state.content.probId} className=\"card-body\">\r\n                        <p className=\"card-text\">{this.state.content.statement}</p>\r\n                    </div>\r\n                </div>\r\n            // </div>\r\n        );\r\n    }\r\n}\r\n\r\n// module.exports = Box\r\nexport default Box","import React from 'react';\nimport './App.css';\n\nimport Box from \"../Box/Box\";\n\nconst bootstrapBG = [\n  'text-white bg-primary',\n  'text-white bg-secondary',\n  'text-white bg-success',\n  'text-white bg-danger',\n  'text-white bg-warning',\n  'text-white bg-info',\n  'text-white bg-dark'\n]\n\nclass App extends React.Component{\n\n  constructor(){\n    super()\n\n    this.state = {\n      children: [],\n    };\n\n    fetch('https://adig15.herokuapp.com/sihJ20/ps/getAll', {\n      method: 'GET',\n      headers: {\n        'Accept': 'application/json',\n        'Content-Type': 'application/json;charset=UTF-8'\n      }\n    }).then((res) => res.json())\n    .then(data => {\n        var allPS = data\n\n        let newChildren = []\n        console.log(allPS)\n        allPS.forEach(ps => { //forEach is blocking\n\n          let bg = bootstrapBG[Math.floor(Math.random()*bootstrapBG.length)]\n          newChildren.push(\n            <Box content={ps} bgClass={bg}/>\n          )\n        })\n\n        this.setState({children: newChildren});\n      })\n\n  }\n\n  render(){\n    return(\n      <div className=\"App\">\n        <header className=\"App-header\">\n          <p>\n            All Problem Statements added TILL NOW\n          </p>\n        </header>\n        {this.state.children}\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  // <React.StrictMode>\n    <App />,\n  // </React.StrictMode>,\n  document.getElementById('root') //instead of this getElementById, we can simply have document.body, to render inside body tag\n\n);\n\nconsole.log(App)\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}